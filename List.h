#ifndef LIST
#define LIST
//пространство имен, в котором определена структура списка и функции дл€ работы с ним
namespace list
{
	//структура односв€зного списка
	struct List
	{
		int value; //значение €чейки
		List* next; //ссылка на след. €чейку
		List(int val = 0, List* p = nullptr) //конструктор
		{
			value = val;
			next = p;
		}
	};

	/*
	* ф - и€ дл€ поиска €чейки по индексу
	* первый аргумент - индекс, второй - ссылка на первую €чейку списка
	* возвращает ссылку на €чейку под указанным индексом
	*/
	List* FindItem(int ind, List* head);
	/*
	* ф-и€ дл€ добавлени€ элемента в конец списка
	* первый аргумент - значение новой €чейки, второй - ссылка на первую €чейку списка
	* возвращает ссылку на €чейку под указанным индексом
	*/
	List* AddLast(int n, List* head);
	/*
	* ф-и€, замен€юща€ все вхождени€ числа ј на число ¬
	* первый аргумент - число, которое нужно заменить,
	* второй аргумент - число, на которое замен€етс€ число ј
	* третий аргумент - ссылка на первую €чейку списка
	* возвращает ссылку на последнюю замену
	*/
	List* Change(int A, int B, List* head);
	/*
	* ф-и€, добавл€юща€ в конец одного списка элементы другого списка в обратном пор€дке
	* первый аргумент - ссылка на первую €чейку первого списка
	* второй аргумент - ссылка на первую €чейку второго списка
	* возвращает ссылку на первую €чейку первого списка
	*/
	List* AddReverseList(List* head1, List* head2);
}
#endif
